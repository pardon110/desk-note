
查看python自带的帮助文档
pydoc -p 8000 

**python调试*****
pip install pudb  类似于toubar C 调试python工具
使用脚本前使用它
import pudb; pu.db
用以下命令启动它
pudb my-script.py


pip包工具
创建配置文件
linux : ~/.pip/pip.conf
window: %homepath%\pip\pip.ini


SQLAlchemy  Object Relational Mappers，ORM

    Python编程语言下的一款开源软件 

pip 是python的软件安装工具


笔记：
1.安装python，pyhton-mysqldb驱动， sqlalchemy，faker
2.定义表结构
3.关系定义(当前为user类）
	relationship('Article',backref='author')		一对多关系
	relationship('UserInfo',backref='user',uselist=False)	一对一关系（在1:n之上)
多对多使用table方法
4.faker 用来生成假数据，用作测试使用

关键点:
	使用declarative 语言建表结构

relationship函数是sqlalchemy对关系之间提供的一种便利的调用方式, 
backref参数则对关系提供反向引用的声明。

session.commit() 执行数据提交

数据库操作
create 数据
session.add_all(),session.add()
session.commit()



#####################
python 基础 LEGB
#####################
print type
python
序列
tuple(定值表，元祖）   一旦建立，tuple的各个元素不可再变更
list (列表）	       而list的各个元素可以再变更
备注：序列元素的下标从零开始

索引，
切片	范围引用:基本样式【下限：上限：步长]  ,
	默认步长,如果写明上限，那么这个上限本身不包括在内
print s1[-1]	尾部元素引用
字符串 亦可使用索引，切片等操作，但不可赋值。元组和字符串都属于python中的不可变对象

运算
3**2	乘方
10%3	求余

判断	返回True/False
	is,is not 
	print 5 in [1,3,5]

逻辑运算
	and，or，not
缩进	以四个空格的缩进来表示隶属关系

语句结构
	if i>0:
	if i>0: elif: else:
for 元素 in 序列：
	for a in [1,4.4]:  将序列中元素取出并赋值给元素a
while循环
	while 条件：statement
中断循环
	continue 跳过当次操作
	break	停止执行整个循环

*****************
函数
*****************
1.定义
def square_sum(a,b):
	c = a**2,b**2
	return c
备注：python函数允许不使用return
	return 可以返回多个值，以逗号分隔。相当于返回一个tuple（定值表)
	return a,b,c	相当于 return（a,b,c)
注释 #
	无返回值时，函数自动返回None
 
2.函数调用和传递参数
常用法位置传递
	整数变量传递给函数，函数操作后，但原整数变量不发生变化
	将列表传递给函数，函数操作后，原来的列表发生变化
备注：对于基本数据类型的变量，是用值传递给函数，不影响原来的变量
	对于列表来说，传递给函数的是一个指针



******************
对象
******************
1.相近对象，归为类
  class object
class Bird（object）：		定义类 使用了继承
summer = Bird()	summer.way	使用对象
2.动作 方法（method)
  def move(self)		方法的第一个参数必须是self，无论是否用到
备注：self只是为了内部使用，不需要传递其参数

面向对象的进一步拓展
1.调用类的其它信息
	python中self相当于this
备注：如果修改类属性的内容时影响到所有对象实例，因类的属性内容是共享的。
2.__init__()方法
特殊方法special method，相当于python的构造方法
若有定义，创建对象后，python会自动调用这个方法，此过程也叫初始化。
3.对象的性质
即php中的动态添加属性，通过__init__给属性添加值

4.帮助
help()
help> keywords
help> modules
help> topics
quit		退出帮助

5.python 函数
dir()		查询一个类或者对象的所有属性
help()		查询说明文档
range()
len()
exit()		退出

6.list类型常用方法
每个列表都属于该类
count,index,append,sort,pop,remove,insert

7.运算符是特殊方法
dir(list) __add__ 对应 + 

python list注意点
[]是引用传址调用
[:]是复制穿值调用 简述这是一个切片，即复制值

8.python强大的原因：提供许多已经写好的，可以现成用的对象


##################
python进阶
###################
1.词典 dictionary    容器container
例：dic = {'a':11} 	其元素包含：键和值，值可为任意对象，词典通过键来引用
    dic = {}		构建空的字典
2.for key in dic:	词典元素循环调用
3.词典的常用方法
dic.keys()
dic.values()
dic.items()		返回dic所有元素的键值对，每个键值对为tuple类型
del dic['tom']		删除dic的'tom'元素
del 用于删除对象

文本文件的输入输出
1.对象名 = open(文件名，模式）	创建文件对象
f = open('tst.txt','r+')
常用模式：
	r/r+		只读/可读写  文件必须存在
	w/w+		打开只写文件，文件不存在则建立/可读写
	a/a+		以附加的形式打开只写/可读写文件，不存在则建立
	rb/w+b/ab+	加入b字符告知函数库打开的为二进制文件，而非纯文字文件
2.文件对象的方法
读取
content = f.read(N)	读取N bytes的数据
f.readline()		读取一行
f.readlines()		读取所有行，储存在列表中，每个元素是一行。
f.write()		写入文件
f.close()		关闭文件

模块
在python中， 一个.py文件就构成一个模块，通过模块调用其它文件中的程序
模块.对象方式来调用引入模块中的某个对象
import first
import a as b
from a import function1
from a import *

搜索路径
	程序所在的文件夹
	操作系统环境变量所包含的路径
	标准库的安装路径
包
import this_dir.module
	this_dir该文件夹下必须包含一个__init__.py文件，即该文件夹为一个模块包，可为空文件夹

****************
函数
****************

 函数的参数传递
例：def f(a,b,c) :

1.位置传递，调用 f（1，2，3）
	遵守位置的对应关系  与其它的语言一致

2.关键字传递 可用 f(c=3,b=2,a=1)
	关键字（keyword)传递根据每个参数的名字传递参数

二者亦可混用，但位置参数要出现在关键字参数之前，如f(1,c=3,b=2)

参数默认值与其它语言一致

3.包裹传递
包裹位置参数传递
def func(*name)	
	在func的参数表中，所有的参数被name收集，根据位置合并成一个元组(tuple)
包裹关键字传递
def func(**dict) 则dict为字典类型
包裹传递的关键在于定义函数时，在相应元组或字典前加*或 ** 。

4.解包裹
def func(a,b,c):
    print a,b,c

args = (1,3,4)
func(*args)
就是在传递tuple时，让tuple的每一个元素对应一个位置参数。传递字典时亦同理。

5.混合，基本原则：先位置，再关键，再包裹，再包裹位置，再包裹关键字
注意：包裹和解包并不是相反操作，而是两个相对独立的过程。


注意：for 循环后的in跟随一个序列时，循环每次使用序列的元素而非序列的下标
range()  
for i in range(0,len(string),2):
	print s[i]

enumerate()	可在每次循环中同时得到下标和元素
S = 'abcdefghijk'
for (index,char) in enumerate(S):
    print index
    print char
实际enumerate()每次循环中，返回的是一个包含两个元素的定值表(tuple)
 
zip() 处理等长序列  功能：聚合列表
ta = [1,2,3]
tb = [9,8,7]
tc = ['a','b','c']
for (a,b,c) in zip(ta,tb,tc):
    print(a,b,c)print char
分解聚合后的列表
zipped = zip(ta,tb)
na,nb = zip(*zipped)

1.可迭代对象
即包含有__iter__方法的对象
可用liter(对象）获取迭代者，next方法迭代，完成则抛出 StopIteration错误。

2.迭代器
即包含__next__方法的任何对象 在python中生成生成器也是一种迭代器
下面生成器
>>> def gen():
...     a = 100
...     yield a
...     a = a*8
...     yield a
...     yield 1000
生成器编写，只是将retun的地方改为yield,每调用一次生成器，返回上次yield后的地方重新执行，在下一个yield前返回。

G = (x for x in range(4))  生成器表达式

4.列表推导
list comprehension 快速生成列表的方法
L = []
L = [x**2 for x in range(10)]
结果如下：[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
注：表推导的机制实际上是利用可迭代对象

函数对象
　其具有的属性可以使用dir()查询，作为对象可以为参数传递

1.lambda函数 通俗的称呼匿名函数
	lambda 生成一个函数对象	func = lambda x,y: x+y
2.函数作为参数传递
	test（（lambda x,y:x**2+y),6,9)
3.map()函数  作用同php一样
map第一个参数为函数对象，第二参数为包含多个元素的表
test = map((lambda x,y:x+y),[1,2,3],[6,7,8])
4.filter()函数
 参数：函数对象，元素表
如果函数对象返回是True，则该次的元素被储存于返回的表中.
5.reduce()函数
  第一个参数也为函数，但只接收两个参数，可累进地将函数作用于各个参数
  print reduce((lambda x,y:x+y),[1,2,3,5,7,9])
python3.0中不能直接用，被定义在functools包内，需要引入包

***************
异常处理
***************
try: 
except StopIteration:
excpet:
finally:
流程如下：
try->异常->except->finally
try->无异常->else->finally

2.抛出异常
raise StopIteration()

动态类型(Python的核心机制之一)
列表可以通过引用其元素，改变对象自身（in-place change) 可变数据对象(mutable object),
词典也是这种数据类型。
面像数字和字符串，不能改变对象本身，只能改变引用指向，称为不可变数据对象(immutable object)


################
python深入
################
1.特殊方法与多范式
	运算符 		+	 依赖于对象中是否有__add__
	内置函数 	len 	__len__
	列表元素引用	li[3]	li.__getitem(3)
	函数			__call__() 有此方法的对象都会被当作是函数
2.上下文管理器
	用于规定某个对象的使用范围，一旦进入或离开该范围，会有特殊操作被调用。
  with ... as  使用上下文管理器		__enter__()    __exit__()
  自定义
	任何定义了__enter__()和__exit__()方法的对象都可以用于上下文管理器。

__exit__(self,exc_type,exc_value,traceback) 当程序出现异常，后三个参数用于描述异常

3.对象的属性
类属性，对象属性
属性__dirct__系统  			本质上是打印所属类的属性与方法
	对象属性储存在			对象的__dict__属性中
	__class__属性			找到对象的类
	__base__			属性来查询父类
注：python中的属性是分层定义的。
以下两种形式等价：
summer.__dict__['age'] = 3
summer.age = 5

特性(property) 即时生成属性的方法
   例：def getAdult(self):	
	adult = property(getAdult)	使用property（)来创建
   neg = property(getNeg,setNeg,delNeg,"I'm") 四个参数，前三个参数为函数
	分别为：查询特性，修改特性，删除特性
		最后N一个参数为特性的文档，可以为一个字符串 （使用__doc__访问）
   其属性不同的使用，触发不同函数。

特殊方法 
__getattr__(self,name)		查询即时生成的属性
__getattr__			只能用来查询不在__dict__系统中的属性)
__getattribute__		特殊方法，用于查询任意属性
__setattr__(self,name,value)	修改任意属性
__delattr__(self,name)		删除任意属性

即时生成属性的其他方式
descriptior	property()函数即是其对象

******************
python深入2 装饰器
******************
函数对象的作用域
闭包
 line定义的隶属程序块中引用了高层级的变量b,但b的定义并不在line的隶属程序块中，
 则b为line的变量环境。line所参照的b值是函数对象定义时可供参考的b值，而非使用时。
一个函数和它的环境变量合在一起，构成一个闭包。
环境变量取值被保存在函数对象的__closure__属性中。
所谓闭包是一个包含有环境变更取值的函数对象。
__closure__包含一个元组(tuple)
利用闭包其实创建泛函

闭包与并行运算 
	闭包有效的减少了函数所需要定义的参数数目。

1.装饰器 
	对一个函数，方法或者类进行加工。
callable object 	可调用对象
	这样的对象定义有__call__方法

@语法
装饰器定义：
def decorator(F):			装饰器接收一个可调用对象作为输入参数
	def new_F(a,b):
		return F(a,b)
	return new_F

@decorator
	def square_sum(a,b):

备注：通过@语法使用，即将square_sum传递给decorator,
并将decorator返回的新的可调用对象赋值给原来的函数名。

python中的变量名和对象是分离的，变量名可指向任意一个对象。

2.含参的装饰器
定义
def preg_str(pre=''):
	def decorator(F):
	...
	return decorator
使用
@pre_str('^-^')
	def square_sum(a,b)：

备注：含参的装饰器本质上是对原有装饰器的一个函数封装，返回一个装饰器。


装饰类 
	python 2.6后，装饰器被拓展到类
定义
def decorator(aClass):
	class newClass:
		def __init__(self,age):
			self.wrapped = aclass(age)
		def display(self):
	return newClass

使用
@decorator
class Bird:
	def __init__(self,age):
	def display(self):

装饰器的核心作用是 name binding


#############
内存管理
#############
python是动态类型，动态类型对象与引用分离

1.对象的内存使用
id() 用于返回对象身份identity  即内存地址	十进制
hex() 返回十六进制的内存地址

is 用于判断两个引用所指的对象是否相同
注意： python 缓存整数和短字符串，因此每个对象只存一份。但对于其它类型，创造了新的引用。
在python中，每个对象都有存有指向该对象的引用总数，引用计数（reference count)
sys包中getrefcount()查看对象的引用计数

2.对象引用对象
python 容器对象container,如：表，字典。其包含实质是指向各元素的引用。

容器对象的引用可能构成很复杂的拓扑结构，使用objgraph包绘制引用关系图。
使用xdot安装

两个对象可能相互引用，从而构成所谓的引用环（reference cycle)

3.引用减少
	del关键字删除某个引用，亦可删除容器元素中的元素
python中list的index必须是整形，不可为Str

4.垃圾回收 （garbage collection）
  python只会在特定条件下，自动启动垃圾回收，
  当分配对象与取消分配对象的差值高于某个阈值时，启动。
import gc
print(gc.get_threshold())	通过gc模块查看启动。
gc.collect()			手动执行垃圾回收
gc.set_threshold()		可设置扫描次数


5.分代回收（generation)策略
	其基本假设是：存活时间越久的对象，越不可能在后面的程序中变成垃圾。
	故减少在垃圾回收中扫描它们的频率。
python将所有的对象分为0,1,2三代
0代 	新建对象
	某代对象经历垃圾回收，依然存活，其被归入下一代

6.孤立的引用环
	即相互引用，导致引用计数不为零，无法进入垃圾回收状态。
	python复制每个对象的引用计数 gc_ref, 对象i计数 gc_ref_i,遍历所有对象gc_ref_j减1
	

装饰器的启示
   对已有的代码不作修改，只作扩展


##################
python补充
##################
定值表不可变
1.序列的方法
	序列包含有元组（tuple)和列表（list),此外，字符串（string)也是一种特殊序列。
	列表的元素可以更改，元组和字符串一旦建立，其元素不可以更改。
以下内建函数（built-in function)可用于序列
len(s)
min(s)
max(s)
all(s)		可迭代对象所有元素为真，返回True
any(s)		可迭代对象任一元素为真，返回True

以下用于列表和定值表
s.count(x)
s.index(x)

以下只适用于列表(l,l2皆为列表）
l.extend(l2)
l.append(x)
l.sort()
l.reverse()
l.pop()		返回表l的最后一个元素，并在表中删除该元素
del l[i]	删除下标为i的元素
以上方法，会对原来的列表产生影响，而非返回一个新的列表

以下用于字符串的方法，其本质是建立一个新的字符串
str.count(sub)
str.find(sub)	不存在，则返回-1
str.index(sub)	 查找第一次出现的位置,不包含举出错误。
str.rfind(sub)	 从右开始
str.rindex(sub)

str.isalnum()
str.isalpha()
str.isdigit()
str.istitle()	若所有的词首字母都是大写，返回True
str.isspace()
str.islower()
str.isupper()

str.split([sep,[max]])
str.rsplit([sep,[max]])
str.join(s)	返回：将s中的元素，以str为分割符，合并成一个字符串

str.strip([sub]) 返回:去掉头尾字符
str.replace(sub,new_sub)
str.capitalize()	将首字母大写
str.lower()
str.upper()
str.swapcase()		大小写切换
str.title()		将str的每个词（以空格分隔）的首字母大写

str.center(width)   长度为width的字符串，将原字符串放入该字符串中心，其它空余位置为空格。
str.ljust(width)    长度为width的字符串，将原字符串左对齐放入该字符串，其它空余位置为空格。
str.rjust(width)    长度为width的字符串，将原字符串右对齐放入该字符串，其它空余位置为空格。

2.Python小技巧
import 模块
	使用 __name__  当直接运行库文件，__name__为"__main__",如果被import为代表文件名。
import 模块 as t
from 模块 import lib_func
form 模块 import * 

查询
import inspect
print(inspect.getargspec(func))		查询函数的参数
hasattr(obj,attr_name)			查询对象的属性
print a.__class__			查询对象所属类
print a.__class__.__name__		查询对象所属类名
cls.__base__				查询父类

使用中文
#coding=utf8
print("中文")	

print(0b1110)		二进制，以0b开头
print(0o10)		八进制，0o
print(0x2A)		十六进制，0x开头

#		注释

import sys
print(sys.path)		查看搜索路径
python -i script.py 	在脚本运行结束后，直接进入python命令行

安装非标准包
	使用Linux repository 	matplot
	使用pip pip是Python自带的包管理器

pip install -i path --upgrade 
pip install -i path --install-option="--prefix=/home/vamei/util/" web.py	指定安装路

从源码编译 google一下

python内置函数清单 
type() dir() help() len() open() range() enumerate() zip() iter() map() filter() reduce()

数学运算
abs()
round(2.6)	四舍五入
pow(2,3)
cmp(2.3,3.2)
divmod(9,2)
max()
min()
sum()

类型转换 
int("5")                         # 转换为整数 integer
float(2)                         # 转换为浮点数 float
long("23")                       # 转换为长整数 long integer
str(2.3)                         # 转换为字符串 string
complex(3, 9)                    # 返回复数 3 + 9i

ord("A")                         # "A"字符对应的数值
chr(65)                          # 数值65对应的字符
unichr(65)                       # 数值65对应的unicode字符

bool(0)                          # 转换为相应的真假值，在Python中，0相当于False .在Python中，下列对象都相当于False：** [], (), {}, 0, None, 0.0, '' **

bin(56)                          # 返回一个字符串，表示56的二进制数
hex(56)                          # 返回一个字符串，表示56的十六进制数
oct(56)                          # 返回一个字符串，表示56的八进制数

list((1,2,3))                    # 转换为表 list
tuple([2,3,4])                   # 转换为定值表 tuple
slice(5,2,-1)                    # 构建下标对象 slice
dict(a=1,b="hello",c=[1,2,3])    # 构建词典 dictionary


序列操作

all([True, 1, "hello!"])         # 是否所有的元素都相当于True值
any(["", 0, False, [], None])    # 是否有任意一个元素相当于True值

sorted([1,5,3])                  # 返回正序的序列，也就是[1,3,5]
reversed([1,5,3])                # 返回反序的序列，也就是[3,5,1]


类，对象，属性
hasattr(me, "test")               # 检查me对象是否有test属性
getattr(me, "test")               # 返回test属性
setattr(me, "test", new_test)     # 将test属性设置为new_test
delattr(me, "test")               # 删除test属性
isinstance(me, Me)                # me对象是否为Me类生成的对象 (一个instance)
issubclass(Me, object)            # Me类是否为object类的子类


编译执行
repr(me)                          # 返回对象的字符串表达
compile("print('Hello')",'test.py','exec')       # 编译字符串成为code对象
eval("1 + 1")                     # 解释字符串表达式。参数也可以是compile()返回的code对象
exec("print('Hello')")            # 解释并执行字符串，print('Hello')。参数也可以是compile()返回的code对象


其他
input("Please input:")            # 等待输入
globals()                         # 返回全局命名空间，比如全局变量名，全局函数名
locals()                          # 返回局部命名空间


字符串格式化(%操作符)
模板
print("I'm %s. I'm %d year old" % ('Vamei', 99))
在模板和tuple之间，有一个%号分隔，它代表了格式化操作。
print("I'm %(name)s. I'm %(age)d year old" % {'name':'Vamei', 'age':99})
对两个格式符进行了命名。命名使用()括起来。每个命名对应词典的一个key。

格式符
%s    字符串 (采用str()的显示)
%r    字符串 (采用repr()的显示)
%c    单个字符
%b    二进制整数
%d    十进制整数
%i    十进制整数
%o    八进制整数
%x    十六进制整数
%e    指数 (基底写为e)
%E    指数 (基底写为E)
%f    浮点数
%F    浮点数，与上相同
%g    指数(e)或浮点数 (根据显示长度)
%G    指数(E)或浮点数 (根据显示长度)

%%    字符"%"

可以用如下方式，对格式进行进一步的控制
%[(name)][flags][width].[precision]typecode
(name)为命名
flags可以有+,-,' '或0。+表示右对齐。-表示左对齐。' '为一个空格，表示在正数的左侧填充一个空格，从而与负数对齐。0表示使用0填充。
width表示显示宽度
precision表示小数点后精度


##################
python 标准库
##################
re 正则包
import re	导入正则表达式包
search,match,sub,split,findall,complie

m = re.search(pattern, string)  	# 搜索整个字符串，直到发现符合的子字符串。
m = re.match(pattern, string)   	# 从头开始检查字符串是否符合正则表达式。
					必须从字符串的第一个字符开始就相符。
>>> import re
>>> m = re.search('[0-9]','abcd4ef')
>>> print(m.group(0))
4
str = re.sub(pattern, replacement, string) 
# 在string中利用正则变换pattern进行搜索，对于搜索到的字符串，用另一字符串replacement替换。返回替换后的字符串。
re.split()    # 根据正则表达式分割字符串， 将分割后的所有子字符串放在一个表(list)中返回
re.findall()  # 根据正则表达式搜索字符串，将所有符合的子字符串放在一个表(list)中返回

书写正则表达式
单个字符
.          任意的一个字符
a|b        字符a或字符b
[afg]      a或者f或者g的一个字符        
[0-4]      0-4范围内的一个字符
[a-f]      a-f范围内的一个字符
[^m]       不是m的一个字符
\s         一个空格
\S         一个非空格
\d         [0-9]
\D         [^0-9]
\w         [0-9a-zA-Z]
\W         [^0-9a-zA-Z]

重复
*         重复 >=0 次
+         重复 >=1 次
?         重复 0或者1 次
{m}       重复m次。比如说 a{4}相当于aaaa，再比如说[1-3]{2}相当于[1-3][1-3]
{m, n}    重复m到n次。比如说a{2, 5}表示a重复2到5次。小于m次的重复，或者大于n次的重复都不符合条件。

位置
^ $ 与其它语言一致

返回控制
output_(\d{4}) 用括号()正则表达式的一部分，被称为群(group)
m.group(number)的方法来查询群。group(0)是整个正则表达的搜索结果，group(1)是第一个群……
>>> import re
>>> m = re.search("output_(\d{4})", "output_1986.txt")
>>> print(m.group(1))
1986
>>>

群命名
>>> import re
>>> m = re.search("output_(?P<year>\d{4})", "output_1986.txt")   #(?P<name>...) 为group命名
>>> print(m.group("year"))
1986
>>>

时间与日期包 （time, datetime包）
1.time包
import time
time,clock, sleep 	查看程序运行状态时，可以使用它们
st = time.gmtime()      # 返回struct_time格式的UTC时间
st = time.localtime()   # 返回struct_time格式的当地时间, 当地时区根据系统环境决定。
s  = time.mktime(st)    # 将struct_time格式转换成wall clock time

2. datetime包
date和time两个部分组成 
import datetime
t = datetime.datetime(2012,9,3,21,30)
print(t)  

返回的t有如下属性
hour, minute, second, microsecond
year, month, day, weekday   # weekday表

运算
import datetime
t      = datetime.datetime(2012,9,3,21,30)
t_next = datetime.datetime(2012,9,5,23,30)
delta1 = datetime.timedelta(seconds = 600)
delta2 = datetime.timedelta(weeks = 3)
print(t + delta1)
print(t + delta2)
print(t_next - t)

两个datetime对象还可以进行比较。比如使用上面的t和t_next:
print(t > t_next)

datetime对象与字符串转换
from datetime import datetime
format = "output-%Y-%m-%d-%H%M%S.txt" 
str    = "output-1997-12-23-030000.txt" 
t      = datetime.strptime(str, format)
print t
反过来，我们也可以调用datetime对象的strftime()方法，来将datetime对象转换为特定格式的字符串。比如上面所定义的t_next,

print(t_next.strftime(format))


#############################
路径与文件(os.path包，glob包
#############################
os.path包 主要是处理路径字符串
import os.path
path = '/home/vamei/doc/file.txt'

print(os.path.basename(path))    # 查询路径中包含的文件名
print(os.path.dirname(path))     # 查询路径中包含的目录

info = os.path.split(path)       # 将路径分割成文件名和目录两个部分，放在一个表中返回
path2 = os.path.join('/', 'home', 'vamei', 'doc', 'file1.txt')  # 使用目录名和文件名构成一个路径字符串

p_list = [path, path2]
print(os.path.commonprefix(p_list))    # 查询多个路径的共同部分
os.path.normpath(path)   # 去除路径path中的冗余。比如'/home/vamei/../.'被转化为'/hom
##os.path还可以查询文件的相关信息(metadata)

import os.path 
path = '/home/vamei/doc/file.txt'

print(os.path.exists(path))    # 查询文件是否存在

print(os.path.getsize(path))   # 查询文件大小
print(os.path.getatime(path))  # 查询文件上一次读取的时间
print(os.path.getmtime(path))  # 查询文件上一次修改的时间

print(os.path.isfile(path))    # 路径是否指向常规文件
print(os.path.isdir(path))     # 路径是否指向目录文件


2.glob包
glob()
常用的方法只有一个, glob.glob()。该方法的功能与Linux中的ls相似，接受一个Linux式的文件名格式表达式(filename pattern expression)，列出所有符合该表达式的文件，将所有文件名放在一个表中返回。所以glob.glob()是一个查询目录下文件的好方法。
备注：只能查找当前文件目录下，不递归。


############################
文件管理(部分os包，shutil包）
#############################
os包
mkdir(path)		创建新目录
rmdir(path)
listdir(path)
remove(path)		删除path指向的文件
rename(src,dst) 	重命名文件
chmod（path,mode)
chown(path,uid,gid)
stat(path)		查看path所指向文件的附加信息
symlink(src,dst)	为文件dst创建软链接
getcwd()		查询当前工作路径


shutil包
copy(src,dst)
move(src,dst)


###############################
存储对象(pickle包，cPickle包)
###############################
对象存储，唤醒取决于它的定义
1.将内存中的对象转换成为文本流：
	pickle.dumps()方法 可将对象转化为文本流，（即字符串）
import pickle

# define class
class Bird(object):
    have_feather = True
    way_of_reproduction  = 'egg'

summer       = Bird()                 # construct an object
picklestring = pickle.dumps(summer)   # serialize object

pickle.dump()的方法，将上面两部合二为一:
import pickle

# define class
class Bird(object):
    have_feather = True
    way_of_reproduction  = 'egg'

summer       = Bird()                        # construct an object
fn           = 'a.pkl'
with open(fn, 'w') as f:                     # open file with write-mode
    picklestring = pickle.dump(summer, f)   # serialize and save object

2.重建对象
首先，我们要从文本中读出文本，存储到字符串 (文本文件的输入输出)。然后使用pickle.loads(str)的方法，将字符串转换成为对象.也可以使用pickle.load()的方法，将上面步骤合并:
import pickle

# define the class before unpickle
class Bird(object):
    have_feather = True
    way_of_reproduction  = 'egg'

fn     = 'a.pkl'
with open(fn, 'r') as f:
    summer = pickle.load(f)   # read file and build object

2、cPickle包

cPickle包的功能和用法与pickle包几乎完全相同 (其存在差别的地方实际上很少用到)，不同在于cPickle是基于c语言编写的，速度是pickle包的1000倍。对于上面的例子，如果想使用cPickle包，我们都可以将import语句改为:

import cPickle as pickle

########################
python 标准库（中） LEGB
########################
子进程（subprocess包）
subprocess包主要功能是执行外部的命令和程序

1、subprocess	
	subprocess包中定义有数个创建子进程的函数
	流(standard stream)和管道(pipe)的工具，从而在进程间使用文本通信。
注意:
    1 在创建子进程之后，父进程是否暂停，并等待子进程运行。
    2 函数返回什么
    3 当returncode不为0时，父进程如何处理。

subprocess.call()		返回退出信息(returncode，相当于exit code)
subprocess.check_call()		返回0,如果returncode不为0，则举出错误
subprocess.check_output()	返回子进程向标准输出的输出结果
这三个函数的使用方法相类似，皆为父进程等待子进程完成 （同步执行）

subprocess.call()来说明:
import subprocess
rc = subprocess.call(["ls","-l"]) 		用一个表来运行子进程
out = subprocess.call("ls -l", shell=True)	先运行一个shell，再用shell来解释字符串。
注意：shell的内建命令必须是通过shell来运行。shell=True允许我们运行这样一些命令

2.Popen()	即可以实现类似异步执行	
	Popen对象创建后，主程序不会自动等待子进程完成，如需要使用对象wait()方法
实例：
import subprocess
child = subprocess.Popen(["ping","-c","5","www.google.com"])
child.wait()
print("parent process")
    child.poll() # 检查子进程状态
    child.kill() # 终止子进程
    child.send_signal() # 向子进程发送信号
    child.terminate() # 终止子进程

3.子进程的文本流控制
child.stdin		子进程的标准输入
child.stdout		子进程的标准输出
child.stderr		子进程的标准错误

可利用subprocess.PIPE将多个子进程的输入和输出连接在一起，构成管道(pipe):
subprocess.PIPE实际上为文本流提供一个缓存区
实例：
import subprocess
child1 = subprocess.Popen(["ls","-l"], stdout=subprocess.PIPE)
child2 = subprocess.Popen(["wc"], stdin=child1.stdout,stdout=subprocess.PIPE)
out = child2.communicate()
print(out)
注意：communicate()是Popen对象的一个方法，该方法会阻塞父进程，直到子进程完成

实例：
利用communicate()方法来使用PIPE给子进程输入:
import subprocess
child = subprocess.Popen(["cat"], stdin=subprocess.PIPE)
child.communicate("vamei")

####################
信号 (signal包)  
####################
基本流程：定义信号，信号处理，发送信号，执行。

注意：signal包主要是针对UNIX平台(比如Linux, MAC OS)
1.定义信号名
signal包定义了各个信号名及其对应的整数
实例：
import signal
print signal.SIGALRM
print signal.SIGCONT

2.预设信号处理函数	(类似事件触发）
	核心 用signal.signal()函数来预设(register)信号处理函数
singnal.signal(signalnum, handler)
	当handler为signal.SIG_IGN时，信号被无视(ignore)。
	当handler为singal.SIG_DFL，进程采取默认操作(default)。
	当handler为一个函数名时，进程采取函数中定义的操作。

import signal
# Define signal handler function
def myHandler(signum, frame):
    print('I received: ', signum)

# register signal.SIGTSTP's handler 
signal.signal(signal.SIGTSTP, myHandler)
signal.pause()				#发送暂停信号 
print('End of Signal Demo')


3.定时发出SIGALRM信号
	signal.alarm()，它被用于在一定时间之后，向进程自身发送SIGALRM信号:
实例
import signal
# Define signal handler function
def myHandler(signum, frame):
    print("Now, it's the time")
    exit()

# register signal.SIGALRM's handler 
signal.signal(signal.SIGALRM, myHandler)
signal.alarm(5)
while True:
    print('not yet')

4.发送信号 
实际上signal, pause，kill和alarm都是Linux应用编程中常见的C库函数，用Python语言来实现了一下
Python 的解释器是使用C语言来编写的，


###########################
多线程与同步 (threading包)
###########################
	Python是一种网络服务器的后台工作语言
预备知识：
	线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量
	一个线程死掉就等于整个进程死掉。同一个进程中的多个线程之间可以并发执行

Python使用threading.Thread对象来代表线程，
用threading.Lock对象来代表一个互斥锁 (mutex)。

1.多线程售票以及同步
import threading
import time
import os

# This function could be any function to do other chores.
def doChore():
    time.sleep(0.5)
实例：
# Function for each thread
def booth(tid):
    global i
    global lock
    while True:
        lock.acquire()                # Lock; or wait if other thread is holding the lock
        if i != 0:
            i = i - 1                 # Sell tickets
            print(tid,':now left:',i) # Tickets left
            doChore()                 # Other critical operations
        else:
            print("Thread_id",tid," No more tickets")
            os._exit(0)              # Exit the whole process immediately
        lock.release()               # Unblock
        doChore()                    # Non-critical operations

# Start of the main function
i    = 100                           # Available ticket number 
lock = threading.Lock()              # Lock (i.e., mutex)

# Start 10 threads
for k in range(10):
    new_thread = threading.Thread(target=booth,args=(k,))   # Set up thread; target: the callable (function) to be run, args: the argument for the callable 
    new_thread.start()                                      # run the thread	
备注：i和lock是不可变数据对象，它们将被当作一个局部变量。
如果是可变数据对象的话，则不需要global声明
threading.Thread()的方法来创建一个Thread对象，调用start()方法来运行线程

2.OOP创建线程
	其核心是继承threading.Thread类。
	OOP的话，通过修改Thread类的run()方法来定义线程所要执行的命令。
例子：
import threading
import time
import os

# This function could be any function to do other chores.
def doChore():
    time.sleep(0.5)

# Function for each thread
class BoothThread(threading.Thread):
    def __init__(self, tid, monitor):
        self.tid          = tid
        self.monitor = monitor
        threading.Thread.__init__(self)
    def run(self):
        while True:
            monitor['lock'].acquire()                          # Lock; or wait if other thread is holding the lock
            if monitor['tick'] != 0:
                monitor['tick'] = monitor['tick'] - 1          # Sell tickets
                print(self.tid,':now left:',monitor['tick'])   # Tickets left
                doChore()                                      # Other critical operations
            else:
                print("Thread_id",self.tid," No more tickets")
                os._exit(0)                                    # Exit the whole process immediately
            monitor['lock'].release()                          # Unblock
            doChore()                                          # Non-critical operations

# Start of the main function
monitor = {'tick':100, 'lock':threading.Lock()}

# Start 10 threads
for k in range(10):
    new_thread = BoothThread(k, monitor)
    new_thread.start()

注意：使用了可变数据对象 词典，列表


3.其他
threading.Thread对象： 	
	join()方法，调用该方法的线程将等待直到该Thread对象完成，再恢复运行。
	这与进程间调用wait()函数相类似。

threading.Lock对象: 	
	mutex, 有acquire()和release()方法。

threading.Condition对象: condition variable
	对Condition对象调用acquire()和release()方法，以控制潜在的Lock对象
	wait()方法，相当于cond_wait()
	notify_all()，相当与cond_broadcast()
	nofify()，与notify_all()功能类似，但只唤醒一个等待的线程，而不是全部

threading.Semaphore对象: semaphore	计数锁
	创建对象的时候，可以传递一个整数作为计数上限 (sema = threading.Semaphore(5))

threading.Event对象
	对象有True和False两个状态。可以多个线程使用wait()等待，直到某个线程调用该对象的set()方法，将对象设置为True。线程可以调用对象的clear()方法来重置对象为False状态


#####################
进程信息 (部分os包)
#####################
	Python的os包中有查询和修改进程信息的函数
import os
1.进程信息
	uname() 返回操作系统相关信息。类似于Linux上的uname命令。
	umask() 设置该进程创建文件时的权限mask。类似于Linux上的umask命令
get*() 查询 (*由以下代替)
	uid, euid, resuid, gid, egid, resgid ：权限相关，其中resuid主要用来返回saved UID
	pid, pgid, ppid, sid                 ：进程相关
put*() 设置 (*由以下代替)
	euid, egid： 用于更改euid，egid。
	uid, gid  ： 改变进程的uid, gid。只有super user才有权改变进程uid和gid (意味着要以$sudo python的方式运行Python)。	
	pgid, sid ： 改变进程所在的进程组(process group)和会话(session)。	
getenviron()：获得进程的环境变量
setenviron()：更改进程的环境变量

2、saved UID和saved GID

###############################
多进程初步 (multiprocessing包)
###############################
	多进程管理包,而subprocessing本身就是设计成为一个shell
multiprocessing.Process		对象来创建一个进程
	该Process对象也有start(), run(), join()的方法
	亦有Lock/Event/Semaphore/Condition类
	multiprocessing的很大一部份与threading使用同一套API
但仍需要注意：
1.必要对每个Process对象调用join()方法 (实际上等同于wait)。进程成为僵尸进程(Zombie)
2.multiprocessing提供了如Pipe和Queue，效率上更高
3.多进程应避免共享资源，因每个进程有自己独立的内存空间

Process.PID中保存有PID，如果进程还没有start()，则PID为None。
所有Thread的PID都与主程序相同，而每个Process都有一个不同的PID。

Pipe和Queue
(1)、 Pipe可以是单向(half-duplex)，也可以是双向(duplex)。我们通过mutiprocessing.Pipe(duplex=False)创建单向管道 (默认为双向)。一个进程从PIPE一端输入对象，然后被PIPE另一端的进程接收，单向管道只允许管道一端的进程输入，而双向管道则允许从两端输入。

pipe = mul.Pipe()		# Build a pipe
pipe.send()	pipe.recv()	# 传送/接收对象
	
2)、 Queue与Pipe相类似，都是先进先出的结构。但Queue允许多个进程放入，多个进程从队列取出对象。Queue使用mutiprocessing.Queue(maxsize)创建，maxsize表示队列中可以存放对象的最大数量。

queue = multiprocessing.Queue(3)
lock  = multiprocessing.Lock()  
multiprocessing.Process(target=inputQ,args=(queue,))
multiprocessing.Process(target=outputQ,args=(queue,lock))


#########################
python 标准库下
#########################
多进程探索 (multiprocessing包)

1.进程池Process Pool)	以创建多个进程。
例子：
import multiprocessing as mul

def f(x):
    return x**2

pool = mul.Pool(5)
rel  = pool.map(f,[1,2,3,4,5,6,7,8,9,10])
print(rel)	

意义：用5个进程并行处理，除了map()方法外，Pool还有下面的常用方法
apply_async(func,args) 	
close()	进程池不再创建新的进程
join() wait进程池中的全部进程。必须对Pool先调用close()方法才能join。


2.共享资源
可以通过共享内存和Manager对象实现。
共享内存
Manager	类似于服务器与客户之间的通信 (server-client)
Manager利用list()方法提供了表的共享方式
dict()来共享词典
Lock()来共享threading.Lock

例子：
import multiprocessing

def f(x, arr, l):
    x.value = 3.14
    arr[0] = 5
    l.append('Hello')

server = multiprocessing.Manager()
x    = server.Value('d', 0.0)
arr  = server.Array('i', range(10))
l    = server.list()

proc = multiprocessing.Process(target=f, args=(x, arr, l))
proc.start()
proc.join()

print(x.value)
print(arr)
print(l)

##################################
数字与随机数（math包，random包）
##################################
math包  
#################
numpy和scipy包，它们不但支持数组和矩阵运算，还有丰富的数学和物理方程可供使用。

import math
math.e   	# 自然常数e
math.pi  	# 圆周率pi

math.ceil(x)       # 对x向上取整，比如x=1.2，返回2
math.floor(x)      # 对x向下取整，比如x=1.2，返回1
math.pow(x,y)      # 指数运算，得到x的y次方
math.log(x)        # 对数，默认基底为e。可以使用base参数，来改变对数的基地。比如math.log(100,10)
math.sqrt(x)       # 平方根

三角函数:个弧度(radian)为单位的x作为参数
 math.sin(x), math.cos(x), math.tan(x), math.asin(x), math.acos(x), math.atan(x)
角度和弧度互换: math.degrees(x), math.radians(x)
双曲函数: math.sinh(x), math.cosh(x), math.tanh(x), math.asinh(x), math.acosh(x), math.atanh(x)
特殊函数： math.erf(x), math.gamma(x)

random包
#################

random.seed(x)	改变随机数生成器的种子seed
随机挑选和排序
random.choice(seq)   # 从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。
random.sample(seq,k) # 从序列中随机挑选k个元素
random.shuffle(seq)  # 将序列的所有元素随机排序

随机生成实数
random.random()          # 随机生成下一个实数，它在[0,1)范围内。
random.uniform(a,b)      # 随机生成下一个实数，它在[a,b]范围内。

random.gauss(mu,sigma)    # 随机生成符合高斯分布的随机数，mu,sigma为高斯分布的两个参数。 
random.expovariate(lambd) # 随机生成符合指数分布的随机数，lambd为指数分布的参数。
此外还有对数分布，正态分布，Pareto分布，Weibull分布

迭代器 (itertools)
	使用iter()内置函数，我们可以将诸如表、字典等可迭代对象变为迭代器
	通过调用迭代器的next()方法 (__next__()方法，在Python 3.x中)，迭代器将依次返回一个对象
例子
for i in iter([2, 4, 5, 6]):
    print(i)
itertools包提供了更加灵活的生成迭代器的工具
简述：在python中只有迭代器可用在循环
from itertools import *

1、无穷迭代器
count(5, 2)     #从5开始的整数，每次增加2，即5, 7, 9, 11, 13, 15 ...
cycle('abc')    #重复序列的元素，既a, b, c, a, b, c ...
repeat(1.2)     #重复1.2 ，即1.2, 1.2, 1.2, ...
repeat也可以有一个次数限制:repeat(10, 5)   #重复10，共重复5次

2、函数式工具
函数式编程是将函数本身作为处理对象的编程范式
itertools包含类似的工具。这些函数接收函数作为参数，并将结果返回为一个迭代器。

imap(pow, [1, 2, 3], [1, 2, 3])
starmap(pow, [(1, 1), (2, 2), (3, 3)])  
ifilter(lambda x: x > 5, [2, 3, 5, 6, 7]) 
ifilterfalse(lambda x: x > 5, [2, 3, 5, 6, 7])     
takewhile(lambda x: x < 5, [1, 3, 6, 7, 1]) 	#一旦函数返回False，则停止收集
dropwhile(lambda x: x < 5, [1, 3, 6, 7, 1])  	 当函数返回False时，开始迭代序列

3.组合工具
chain([1, 2, 3], [4, 5, 7])      # 连接两个迭代器成为一个。1, 2, 3, 4, 5, 7
product('abc', [1, 2])   # 多个迭代器集合的笛卡尔积。相当于嵌套循环
for m, n in product('abc', [1, 2]):
    print m, n
permutations('abc', 2)   # 从'abc'中挑选两个元素，比如ab, bc, ... 将所有结果排序，返回为新的迭代器。
combinations('abc', 2)   # 从'abcd'中挑选两个元素，比如ab, bc, ... 将所有结果排序，返回为新的循环器。
combinations_with_replacement('abc', 2) # 与上面类似，但允许两次选出的元素重复。即多了aa, bb, cc

4.groupby()
根据key函数结果，将拥有相同函数结果的元素分到一个新的迭代器
groupby(friends, key = height_class)
例子
>>> def height_class(h):
...     if h > 180:
...         return "tall"
...     elif h < 160:
...         return "short"
...     else:
...         return "middle"
... 
>>> friends = [191, 158, 159, 165, 170, 177, 181, 182, 190]
>>> 
>>> friends = sorted(friends, key = height_class)
>>> for m, n in groupby(friends, key = height_class):
...     print(m)
...     print(list(n))
... 
middle
[165, 170, 177]
short
[158, 159]
tall
[191, 181, 182, 190]
>>>

注意，groupby的功能类似于UNIX中的uniq命令。分组之前需要使用sorted()对原循环器的元素

其它工具
compress('ABCD', [1, 1, 1, 0])  # 根据[1, 1, 1, 0]的真假值情况，选择第一个参数'ABCD'中的元素。A, B, C
islice()                        # 类似于slice()函数，只是返回的是一个循环器
izip()                          # 类似于zip()函数，只是返回的是一个循环器。



##############
数据库
##############
Python自带一个轻量级的关系型数据库SQLite,sqlite3只是一个SQLite的接口

例子如下
import sqlite3

# test.db is a file in the working directory.
conn = sqlite3.connect("test.db")

c = conn.cursor()

# create tables
c.execute('''CREATE TABLE category
      (id int primary key, sort int, name text)''')
c.execute('''CREATE TABLE book
      (id int primary key, 
       sort int, 
       name text, 
       price real, 
       category int,
       FOREIGN KEY (category) REFERENCES category(id))''')

# save the changes
conn.commit()



####################
Python网络
####################
原始Python服务器
	Python服务器框架 (framework, 比如Django, Twisted, web.py等等
底层socket的了解
socket接口是实际上是操作系统提供的系统调用
一个socket包含四个地址信息: 两台计算机的IP地址和两个进程所使用的端口(port)。IP地址用于定位计算机，而port用于定位进程

1.TCP/IP和socket
	socket是进程间通信的一种方法
	IP地址用于定位计算机，而port用于定位进程 
	(一台计算机上可以有多个进程分别使用不同的端口)。

2.TCP socket
	在Python中，我们使用标准库中的socket包来进行底层的socket编程。
	



####################
部署Web App
####################
安装ssh服务
$ sudo apt-get install openssh-server

nginx可以处理静态资源,动态资源反向代理给python.
 Supervisor：监控服务进程的工具

$ sudo apt-get install nginx supervisor python3 mysql-server

安装自己的web app
$ sudo pip3 install jinja2 aiomysql aiohttp

初始化数据库
$ mysql -u root -p < schema.sql


部署
非ftp，scp 或 rsync复制文件
使用工具配合脚本完成自动化部署,如Fabric （注意，该工具安装在开发机器上,服务器上不需要安装)
$ easy_install fabric

配置Supervisor
/etc/supervisor/conf.d/

停止启动服务
$ sudo supervisorctl reload
$ sudo supervisorctl start awesome
$ sudo supervisorctl status
awesome                RUNNING    pid 1401, uptime 5:01:34


Supervisor只负责运行app.py



##############################
安装python 的虚拟环境
##############################
$ sudo apt-get install python-virtualenv

推荐在 virtualenv 下进行开发。	
$ mkdir flask
$ cd flask
$ virtualenv venv --distribute	
$ virtualenv --no-site-packages venv		已经安装到系统Python环境中的所有第三方包都不会复制过来

$ source venv/bin/activate			用source进入该环境
$ . venv/bin/activate				进入当前的virtualenv环境

New python executable in venv/bin/python	
Installing distribute............done.
$ pip install -i http://mirrors.aliyuncs.com/pypi/simple Flask==dev
...
Finished processing dependencies for Flask==dev		

(venv)Mac:myproject michael$ deactivate 	退出当前的venv环境	
.







