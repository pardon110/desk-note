###########################
关于chrome浏览器js调试
###########################
Enter 			默认执行
Enter+shift		输入换行

window.console对象方法，简称console API
-------------------------------------------
console.log		普通信息
console.info		提示类信息
console.error		错误信息
console.warn		警示信息
console.clear		清屏

console.table		以表格的形式将数据输出
console.dir		将dom结点以javascript对象的形式输出到控制台


Command Line API	chrome控制台原生支持类jQuery选择器
--------------------------------------------
$_	返回最近一次表达式执行的结果
$0	返回最近一次点选的DOM结点，以此类推至$5

monitor(func)		接收一个函数名作为参数
unmonitor(func)		停止函数监听

debug(func)
undebug()


console.log格式化打印
---------------------------------------------
%c			css样式
%d			数字
%i			整形数字
%o			DOM元素
%O			javascript对象

示例： 
console.log('%O', new Date());
console.log('%o', document.body);
console.log('%i', 123);
console.log('%c hello world', 'color: red;');


console			回车得到console对象的一些方法


node.js清屏命令
-----------------------------
widows: ctrl+l
mac: command+l

.exit退出
.help  	寻求帮助 



nodejs框架
――――――――――――――――――――――――――――
1.1 安装koa-generator
$ npm install -g koa-generator
1.2 使用koa-generator生成koa2项目
$ koa2 HelloKoa2
$ cd HelloKoa2 
$ npm install
1.3 启动项目
$ npm start


koa2
------------------
 KOA2 能够运行，必须能够使用ES7语法 async/await 能够编译
 npm install --save  koa@next	安装 koa2包

安装
方法一：
npm install koa
或
npm install koa@2.0.0

方法二：
在工程目录下创建 package.json
内容如下:
{
    "name": "hello-koa2",
    "version": "1.0.0",
    "description": "Hello Koa 2 example with async",
    "main": "app.js",
    "scripts": {
        "start": "node app.js"
    },
    "keywords": [
        "koa",
        "async"
    ],
    "author": "Michael Liao",
    "license": "Apache-2.0",
    "repository": {
        "type": "git",
        "url": "https://github.com/michaelliao/learn-javascript.git"
    },
    "dependencies": {
        "koa": "2.0.0"
    }
}

执行
npm install		依据依赖关系下载所需包及依赖

##################################
关键点：在package.json中添加依赖包
"dependencies": {
    "koa": "2.0.0"
}
执行 npm install命令安装
此种方法更为靠谱
##################################

启动程序方式
----------------
命令行启动
node app.js

npm start启动
让npm执行定义在package.json	
"scripts": {
    "start": "node app.js"
}



npm 常用命令
-------------------------
npm install <name>			安装nodejs的依赖包
npm install <name> -g  			将包安装到全局环境中
npm install <name> --save  		安装的同时，将信息写入package.json中
npm init  				会引导你创建一个package.json文件，包括名称、版本、作者这些信息等
npm remove <name>			移除
npm update <name>			更新	
npm ls 					列出当前安装的了所有包
npm root				查看当前包的安装路径
npm root -g  				查看全局的包的安装路径
npm help  				帮助
npm list --depth 0			查看当前一级依赖包 

npm list grunt				查看某个模块的版本号
npm search express 			搜索模块
npm uninstall express			卸载模块	
npm init				创建模块
npm help <command>			查看某条命令的详细帮助
npm cache clear				清空NPM本地缓存
npm update <package>			当前目录下node_modules子目录里边的对应模块更新至最新版本 
	



nodejs常用模块索引
-------------------------
MVC框架 - Express，koa
Rest开发 - Restify
前端模板 - EJS
数据库驱动 - Mongoose
Web Socket - Socket.IO
日志管理 - Log4js
HTTP调用 Request
异步流程控制 - Async
部署 - forever			一个nodejs的守护进程
项目管理	grunt是一个自动化的构建工具
定时任务 - Cron
underscore是一个JS工具库，主要提供了对数组，对象，函数等一些基础工具函数
单元测试	Mocha,Karma,Jasmine。







